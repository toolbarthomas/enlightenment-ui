@import "../styles/mixins/visually-hidden";
@import "../styles/mixins/box-sizing";

@include boxSizing();

@mixin buttonColor(
  $color: "white",
  $light: 500,
  $shade: 800,
  $delta: 200,
  $textColor: false,
  $max: 900
) {
  $invert: 900;
  @if $light > 500 {
    $invert: 300;
  }

  &--in-#{$color} {
    background-color: var(--#{$color}-#{$light});
    box-shadow: inset 0 calc(var(--space-0) - var(--space-1)) 0 0
      var(--black-a10);

    @if $textColor {
      :host([mode="dark"]) & {
        color: var(--#{$color}-900);
      }

      color: $textColor;
    } @else {
      color: var(--#{$color}-#{$shade});

      @if $shade + 100 <= $max {
        :host([mode="dark"]) & {
          color: var(--#{$color}-#{$shade + 100});
        }
      }
    }

    :host([mode="dark"]) & {
      &.button--is-clear {
        color: var(--#{$color}-400);
      }
    }

    &:not(.button--is-disabled):not(.button--is-clear):not(
        .button--is-shaded
      ):hover {
      background-color: var(--#{$color}-#{$light + 100});

      @if $light - 100 >= 100 {
        :host([mode="dark"]) & {
          background-color: var(--#{$color}-#{$light - 100});
        }
      }
    }

    &.button--is-disabled,
    &[disabled] {
      opacity: 0.8;
      &::before {
        background: repeating-linear-gradient(
          45deg,
          var(--#{$color}-#{$light}-a10),
          var(--#{$color}-#{$light}-a10) var(--space-12),
          var(--#{$color}-#{$shade}-a10) var(--space-12),
          var(--#{$color}-#{$shade}-a10) var(--space-24)
        );
      }
    }

    &.button--is-clear {
      border: none;
      box-shadow: none;
      color: var(--#{$color}-700);

      .button__icon {
        fill: currentColor;
      }

      &,
      &.button--is-disabled,
      &[disabled] {
        opacity: 0.8;
        &,
        &:before {
          background: none transparent;
        }
      }

      &[disabled],
      &.button--is-disabled {
        .button__label {
          &::after {
            @if $shade + 100 <= $max {
              background-color: var(--#{$color}-#{$shade + 100});
            }
          }
        }

        .button__icon {
          fill: currentColor;
        }
      }

      .button__ripple {
        background-color: var(--#{$color}-700);
        opacity: 0.4;
      }
    }

    &.button--is-clear {
      .button__label {
        &::after {
          position: absolute;
          left: 50%;
          transform: translateX(-50%);
          display: block;
          bottom: 0;
          width: 0;
          border-radius: var(--space-1);
          pointer-events: none;
          user-select: none;
          opacity: 0;
          content: " ";
          height: var(--space-2);
          background-color: currentColor;
          transition: var(--velocity-default) ease-in-out;
          transition-property: width, opacity;
        }
      }

      &:focus-visible {
        outline: none;
        text-decoration: none;
      }

      &[disabled],
      &.button--is-disabled {
        .button__label {
          &::after {
            bottom: 50%;
            margin: 0;
            width: 100%;
            opacity: 0.6;
          }
        }
      }

      &:not(.button--is-loading) {
        &:hover,
        &:focus-visible,
        &:active {
          .button__label {
            &::after {
              width: 100%;
              opacity: 0.8;
            }
          }
        }
      }
    }

    &.button--is-faded {
      background-color: var(--#{$color}-#{$light}-a80);
      box-shadow: inset 0 0 0 var(--space-2) var(--#{$color}-100-a50);
      border: solid var(--space-2) var(--#{$color}-600);

      @if $textColor {
        color: $textColor;
      } @else {
        color: var(--#{$color}-#{$shade});
      }

      &.button--in-dusk {
        box-shadow: none;
        border: none;
      }

      &.button--is-medium {
        padding: var(--space-12) var(--space-24);
      }

      &.button--is-large {
        padding: var(--space-16) var(--space-32);
      }

      .button__ripple {
        background-color: var(--#{$color}-600);
      }
    }

    &.button--is-shaded {
      background: linear-gradient(
        0deg,
        var(--#{$color}-#{$light}),
        var(--#{$color}-#{$light - $delta})
      );

      border: none;
      text-shadow: 0 var(--space-2) 0 var(--#{$color}-#{$light});
      box-shadow: 0 var(--space-2) var(--space-4) var(--#{$color}-#{$shade}-a10);

      &::before {
        transition: var(--velocity-default) var(--easing-default);
        transition-property: border, box-shadow;
        box-shadow: inset 0 var(--space-4) var(--space-8)
            var(--#{$color}-100-a5),
          inset 0 var(--space-1) 0 var(--#{$color}-100-a50);
        border: solid var(--space-2) var(--black-a5);
      }

      &:not(.button--is-disabled):hover {
        &:before {
          box-shadow: inset 0 var(--space-4) var(--space-8)
              var(--#{$color}-100-a30),
            inset 0 var(--space-1) 0 var(--#{$color}-100-a50);
        }
      }

      .button__ripple {
        opacity: 0.5;
      }
    }

    &:focus-visible {
      // color: var(--#{$color}-#{$invert});
      text-decoration: underline;
      outline: solid var(--space-4) var(--#{$color}-700);
      outline-offset: var(--space-2);
    }

    .button__ripple {
      background-color: var(--#{$color}-200);
      opacity: 0.7;
    }

    .button__icon {
      @if $textColor {
        fill: $textColor;

        :host([mode="dark"]) & {
          fill: var(--#{$color}-900);
        }
      } @else {
        @if $shade - 100 >= 100 {
          fill: var(--#{$color}-#{$shade - 100});
        }

        @if $shade + 100 <= $max {
          :host([mode="dark"]) & {
            fill: var(--#{$color}-#{$shade + 100});
          }
        }
      }
    }

    .button__indicator {
      border-color: var(--#{$color}-#{$shade}-a50);

      :host([mode="dark"]) & {
        border-color: var(--#{$color}-500-a40);
        &::before {
          border-top-color: var(--#{$color}-400);
        }
      }

      &::before {
        border-top-color: var(--#{$color}-#{$shade}-a70);
      }
    }
  }
}

:host {
  display: inline-block;
  vertical-align: middle;
}

:host([layout]) {
  display: block;
  vertical-align: initial;
}

a,
button {
  &.button {
    align-items: center;
    appearance: none;
    border-radius: var(--space-6);
    border: none;

    cursor: pointer;
    display: flex;
    font-family: var(--webfont-base);
    font-size: var(--space-14);
    font-weight: 500;
    justify-content: center;
    outline: none;
    overflow: hidden;
    padding: var(--space-8) var(--space-16);
    position: relative;
    text-align: center;
    transition: var(--velocity-default) var(--easing-default);
    transition-property: background-color, box-shadow, color, opacity;
    @include buttonColor($color: "dawn");

    &[disabled],
    &--is-disabled {
      cursor: not-allowed;
    }

    &--is-shaded,
    &[disabled],
    &--is-disabled {
      &::before {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        content: "";
        border-radius: inherit;
        display: block;
      }
    }

    &:active:not([disabled]) {
      &::before {
        border-color: transparent;
      }
    }
    @include buttonColor($color: "grey");
    @include buttonColor($color: "dusk", $shade: 400, $light: 800, $delta: 100);
    @include buttonColor(
      $color: "blue",
      $shade: 800,
      $light: 600,
      $delta: 100,
      $textColor: var(--white)
    );
    @include buttonColor(
      $color: "red",
      $shade: 600,
      $light: 400,
      $textColor: var(--white)
    );

    &--is-visually-hidden {
      padding: var(--space-8);
    }

    &--is-medium {
      font-size: var(--space-16);
      border-radius: var(--space-8);
      padding: var(--space-12) var(--space-24)
        calc(var(--space-12) - var(--space-1));

      &.button--is-visually-hidden {
        padding: var(--space-10);
      }
    }

    &--is-full-width {
      width: 100%;
      display: flex;
    }

    &--is-large {
      font-weight: 700;
      border-radius: var(--space-12);
      font-size: var(--space-18);
      padding: var(--space-16) var(--space-32)
        calc(var(--space-16) - var(--space-1));

      &.button--is-visually-hidden {
        padding: var(--space-10);
      }
    }

    &--is-square {
      border-radius: 0;
    }

    &--is-pill {
      border-radius: var(--space-48);
      padding-left: var(--space-24);
      padding-right: var(--space-24);

      &.button--is-visually-hidden {
        padding: var(--space-8);
      }
    }
  }
}

.button {
  &__ripple {
    animation: rippleAnimation var(--velocity-slow) 1;
    animation-fill-mode: forwards;
    background-color: var(--white);
    border-radius: 50%;
    opacity: 1;
    pointer-events: none;
    transform: scale(0);
    user-select: none;
  }

  &__label {
    .button--is-visually-hidden & {
      @include visuallyHidden();
    }

    .button--is-full-width.button--has-icon & {
      margin-right: var(--space-24);
    }

    .button--is-small.button--is-full-width.button--has-icon & {
      margin-right: var(--space-16);
    }

    .button--is-large.button--is-full-width.button--has-icon & {
      margin-right: var(--space-32);
    }

    .button--is-rtl.button--is-small.button--is-full-width.button--has-icon & {
      margin-left: calc(var(--space-16) + var(--space-8));
    }

    .button--is-rtl.button--is-large.button--is-full-width.button--has-icon & {
      margin-left: calc(var(--space-16) + var(--space-8));
    }

    .button--is-rtl.button--is-full-width.button--has-icon & {
      margin-right: 0;
      margin-left: calc(var(--space-24) + var(--space-8));
    }
  }

  &__icon-wrapper {
    display: flex;
    flex-shrink: 0;
    position: relative;
    align-items: center;
    justify-content: center;
    width: var(--space-24);
    height: var(--space-24);
    order: -1;

    .button:not(.button--is-visually-hidden) & {
      margin-right: var(--space-8);
      margin-left: calc(var(--space-0) - var(--space-10));
    }

    .button--is-disabled & {
      opacity: 0.6;
    }

    .button--is-rtl:not(.button--is-visually-hidden) & {
      order: 0;
      margin-left: var(--space-8);
      margin-right: calc(var(--space-0) - var(--space-10));
    }

    .button--is-small & {
      width: var(--space-16);
      height: var(--space-16);
    }

    .button--is-large & {
      width: var(--space-32);
      height: var(--space-32);
    }
  }

  &__label {
    position: relative;
    display: block;
  }

  &__icon {
    fill: currentColor;
    width: 100%;
    height: 100%;

    .button--is-loading & {
      visibility: hidden;
    }

    &.button--is-large,
    &.button--is-medium {
      width: 80%;
      height: 80%;
    }
  }

  &__indicator {
    display: block;
    width: 100%;
    height: 100%;
    flex-grow: 1;
    flex-shrink: 0;
    position: relative;
    border-radius: var(--space-48);
    border: solid var(--space-2) currentColor;

    .button--is-medium & {
      border-width: var(--space-4);
    }

    .button--is-large & {
      border-width: var(--space-6);
    }

    &::before {
      display: block;
      position: inherit;
      border-radius: inherit;
      box-sizing: content-box;
      content: " ";
      width: 100%;
      height: 100%;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      border-radius: inherit;
      border: inherit;
      border-color: transparent;
      border-top-color: currentColor;
      animation: rotateAnimation var(--velocity-slowest) linear infinite;
    }
  }
}

@keyframes rippleAnimation {
  to {
    transform: scale(4);
    opacity: 0;
  }
}

@keyframes rotateAnimation {
  to {
    transform: translate(-50%, -50%) rotate(1turn);
  }
}
